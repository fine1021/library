apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

// library
def bintrayRepo = 'maven'
def libraryGroupId = 'com.yxkang.android'
def libraryVersion = '1.0.4'
def libraryName = 'support'
def libraryArtifact = 'support'
def libraryUserOrg = 'fine1021'
def libraryDescription = 'a support library for android'

// uri
def siteUrl = 'https://github.com/fine1021/library'
def gitUrl = 'https://github.com/fine1021/library.git'
def issueUrl = 'https://github.com/fine1021/library/issues'

// developer
def developerId = 'fine1021'
def developerName = 'fine'
def developerEmail = 'fine1021@gmail.com'

// licenses
def allLicenses = ["Apache-2.0"]

group = libraryGroupId
version = libraryVersion

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId libraryGroupId
                artifactId libraryArtifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

//  gradle-bintray-plugin
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    dryRun = false       // Whether to run this as dry-run, without deploying
    publish = true       // If version should be auto published after an upload

    pkg {
        repo = bintrayRepo
        name = libraryName
        userOrg = libraryUserOrg
        desc = libraryDescription
        websiteUrl = siteUrl
        issueTrackerUrl = issueUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publicDownloadNumbers = true
    }
}